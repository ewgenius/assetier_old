generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// auth

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  verified      Boolean   @default(false)

  accounts             UserToAccount[]
  figmaAuthCredentials FigmaAuthCredentials?
}

enum Role {
  ADMIN
  MEMBER
}

// Figma Integration Auth

model FigmaAuthCredentials {
  id           String   @id @default(cuid())
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  accessToken  String
  refreshToken String

  user User @relation(fields: [userId], references: [id])
}

// Account

model UserToAccount {
  userId     String
  accountId  String
  role       Role    @default(MEMBER)
  isPersonal Boolean @default(true)

  user    User    @relation(fields: [userId], references: [id])
  account Account @relation(fields: [accountId], references: [id])

  @@id([userId, accountId])
}

enum AccountType {
  PERSONAL
  TEAM
}

model Account {
  id             String      @id @default(cuid())
  type           AccountType @default(PERSONAL)
  name           String      @default("")
  createdAt      DateTime    @default(now())
  subscriptionId String?

  projects            Project[]
  users               UserToAccount[]
  githubInstallations GithubInstallation[]
  subscription        Subscription?        @relation(fields: [subscriptionId], references: [id])
}

enum SubscriptionPlanType {
  // only personal
  HOBBY
  PRO

  // teams
  TEAM_TRIAL
}

model SubscriptionPlan {
  id        String               @id @default(cuid())
  planType  SubscriptionPlanType @default(HOBBY)
  active    Boolean              @default(true)
  createdAt DateTime             @default(now())

  paddleSubscriptionPlanId Int? @unique

  projectsLimit           Int     @default(1)
  usersLimit              Int     @default(1)
  allowGithubPrivateRepos Boolean @default(false)
  allowGithubOrgs         Boolean @default(false)

  subscriptions Subscription[]

  @@unique([planType, active])
}

model Subscription {
  id                 String @id @default(cuid())
  subscriptionPlanId String

  paddleSubscriptionId Int? @unique

  subscriptionPlan SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  accounts         Account[]
}

// Github

enum GithubAccountType {
  USER
  ORGANIZATION
}

model GithubInstallation {
  id               String            @id @default(cuid())
  installationId   Int               @unique
  accountLogin     String            @default("")
  accountAvatarUrl String            @default("")
  accountType      GithubAccountType @default(USER)
  createdAt        DateTime          @default(now())

  account   Account   @relation(fields: [accountId], references: [id])
  projects  Project[]
  accountId String
}

// Projects

model Project {
  id                   String   @id @default(cuid())
  accountId            String
  name                 String
  createdAt            DateTime @default(now())
  repositoryId         Int
  githubInstallationId String
  figmaFileUrl         String?

  alias             String? @unique @default(cuid())
  publicPageEnabled Boolean @default(false)
  assetsPath        String  @default("")
  defaultBranch     String  @default("main")

  account            Account            @relation(fields: [accountId], references: [id])
  githubInstallation GithubInstallation @relation(fields: [githubInstallationId], references: [id])
}
